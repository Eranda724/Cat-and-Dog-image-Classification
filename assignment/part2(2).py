# -*- coding: utf-8 -*-
"""part2(2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BP9Is_cKNoGfT1_BxGHDZUhieHx9zd9M
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import shutil
import random
import tensorflow as tf

cat_path = "C:/Users/erand/OneDrive - University of Jaffna/myGit/Cat-and-Dog-detection-ML-model/assignment/dataset/Cats"
dog_path = "C:/Users/erand/OneDrive - University of Jaffna/myGit/Cat-and-Dog-detection-ML-model/assignment/dataset/Dogs"
ds = "C:/Users/erand/OneDrive - University of Jaffna/myGit/Cat-and-Dog-detection-ML-model/assignment/dataset"

print(len(os.listdir(cat_path)))
print(len(os.listdir(dog_path)))

for folder in ['train', 'validation', 'test']:
    for subfolder in ['cats', 'dogs']:
        os.makedirs(os.path.join(ds, folder, subfolder), exist_ok=True)

def split_data(source, train_dir, val_dir, test_dir, split_ratio=(0.7, 0.2, 0.1)):
    files = os.listdir(source)
    random.shuffle(files)
    train_size = int(len(files) * split_ratio[0])
    val_size = int(len(files) * split_ratio[1])
    test_size = len(files) - train_size - val_size

    for i, file in enumerate(files):
        if i < train_size:
            shutil.copy(os.path.join(source, file), os.path.join(train_dir, file))
        elif i < train_size + val_size:
            shutil.copy(os.path.join(source, file), os.path.join(val_dir, file))
        else:
            shutil.copy(os.path.join(source, file), os.path.join(test_dir, file))

split_data(cat_path,
           os.path.join(ds, 'train', 'cats'),
           os.path.join(ds, 'validation', 'cats'),
           os.path.join(ds, 'test', 'cats'))

# Split dog images
split_data(dog_path,
           os.path.join(ds, 'train', 'dogs'),
           os.path.join(ds, 'validation', 'dogs'),
           os.path.join(ds, 'test', 'dogs'))

print(len(os.listdir(os.path.join(ds, 'train', 'cats'))))
print(len(os.listdir(os.path.join(ds, 'train', 'dogs'))))
print(len(os.listdir(os.path.join(ds, 'validation', 'cats'))))
print(len(os.listdir(os.path.join(ds, 'validation', 'dogs'))))

from sklearn.model_selection import train_test_split
from tensorflow.keras.applications import VGG16
from tensorflow.keras import layers, models, optimizers, callbacks
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import load_img, img_to_array

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

con_base = Sequential([
    Conv2D(64, (3,3), activation='relu', padding='same', input_shape=(224,224,3)),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(128, (3,3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(256, (3,3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(512, (3,3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(512, (3,3), activation='relu', padding='same'),
    MaxPooling2D(pool_size=(2,2)),

    Flatten()
])

con_base.summary()

testImg = load_img("dataset/test/dogs/dog.891.jpg" , target_size = (224,224))

testImg = img_to_array(testImg)
testImg = np.expand_dims(testImg , axis=0)
testImg/=255.0

plt.imshow(testImg[0])
plt.title("Input Image")
plt.axis("off")
plt.show()

prediction = con_base.predict(testImg)

reduced_prediction = prediction[0].reshape(7, 7, 512)

#reduced_prediction = np.mean(prediction[0], axis=-1)
#plt.matshow(reduced_prediction,cmap='viridis')
#plt.title("Reduced Prediction Heatmap")
#plt.colorbar()
#plt.show()

con_base.trainable = False

model = models.Sequential()
model.add(con_base)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(optimizer=optimizers.Adam(learning_rate=1e-4),
              loss='binary_crossentropy',
              metrics=['accuracy'])

print(len(model.trainable_weights))

con_base.trainable=False

train_ds = r"C:\Users\erand\OneDrive - University of Jaffna\myGit\Cat-and-Dog-detection-ML-model\assignment\dataset\train"
validation_ds = r"C:\Users\erand\OneDrive - University of Jaffna\myGit\Cat-and-Dog-detection-ML-model\assignment\dataset\validation"
test_ds = r"C:\Users\erand\OneDrive - University of Jaffna\myGit\Cat-and-Dog-detection-ML-model\assignment\dataset\test"

train_datagen = ImageDataGenerator(
    rescale=1/255.,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(
    rescale=1/255.
)

train_generator = train_datagen.flow_from_directory(
    train_ds,
    target_size=(224, 224),  # Updated size to match VGG16 input
    batch_size=32,
    class_mode='binary'
)

validation_generator = test_datagen.flow_from_directory(
    validation_ds,
    target_size=(224, 224),  # Updated size to match VGG16 input
    batch_size=32,
    class_mode='binary'
)

from tensorflow.keras.mixed_precision import set_global_policy
set_global_policy('mixed_float16')

early_stopping = callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
model_checkpoint = callbacks.ModelCheckpoint('best_model.h5', monitor='val_loss', save_best_only=True)

history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // validation_generator.batch_size,
    epochs=10,
    callbacks=[early_stopping, model_checkpoint]
)

# Evaluation
test_generator = test_datagen.flow_from_directory(
    test_ds,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary',
    shuffle=False
)

test_loss, test_accuracy = model.evaluate(test_generator)
print(f"Test Accuracy: {test_accuracy:.4f}")

plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

predictions = model.predict(test_generator)
predicted_classes = (predictions > 0.5).astype(int)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

true_classes = test_generator.classes
cm = confusion_matrix(true_classes, predicted_classes)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Cat', 'Dog'])
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.show()

model.save('cat_dog_classifier.h5')

from tensorflow.keras.models import load_model

loaded_model = load_model('cat_dog_classifier.h5')
loaded_model.summary()

def predict_image(image_path):
    img = load_img(image_path, target_size=(224, 224))  # Load image from file path
    img_array = img_to_array(img)
    img_array = img_array / 255.0  # Normalize
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    prediction = model.predict(img_array)
    return 'Dog' if prediction > 0.5 else 'Cat'

image_path = r"C:\Users\erand\OneDrive - University of Jaffna\myGit\Cat-and-Dog-detection-ML-model\assignment\b.jpg"
testImg = load_img(image_path, target_size=(224, 224))
testImg = img_to_array(testImg)
testImg = np.expand_dims(testImg, axis=0)
testImg /= 255.0

plt.imshow(testImg[0])
plt.title("Input Image")
plt.axis("off")
plt.show()

result = predict_image(image_path)
print(f"Predicted: {result}")

def predict_image(image_path):
    img = load_img(image_path, target_size=(224, 224))  # Load image from file path
    img_array = img_to_array(img)
    img_array = img_array / 255.0  # Normalize
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    prediction = model.predict(img_array)
    return 'Dog' if prediction > 0.5 else 'Cat'

image_path = r"C:\Users\erand\OneDrive - University of Jaffna\6sem\DL\aa.jpg"
testImg = load_img(image_path, target_size=(224, 224))
testImg = img_to_array(testImg)
testImg = np.expand_dims(testImg, axis=0)
testImg /= 255.0

plt.imshow(testImg[0])
plt.title("Input Image")
plt.axis("off")
plt.show()

result = predict_image(image_path)
print(f"Predicted: {result}")

